/*
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
Южный Федеральный Университет                                                            
Институт Компьютерных Технологий и Информационной Безопасности                           
Кафедра МОП ЭВМ                                                                          
Программирование и Основы Теории Алгоритмов                                              
Лабораторная работа 4.1 - Подпрограммы, библиотечные функции                             
Задача E. Али-Баба.                                                       
Степичев Олег Геннадиевич (КТбо1-8)                                                      
18.11.2023                                                                               
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
*/

#include <stdio.h>
#include <stdlib.h>

#define size_arr 1000

/**
 * @brief Функция проверки величины чисел для функции qsort(). Возвращает 0 если числа равны, 
 * положительное число если b > a и отрицательное если b < a. 
 * 
 * @param a константный указатель без типа на первое число.
 * @param b константный указатель без типа на второе число.
 * @return возвращает 0, положительное или отрицательное число.
 */
int my_sort(const void  *a, const void *b);


int main(void) {
    int n, m, items[size_arr] = {0};
    scanf("%d %d", &n, &m);

    for (int i = 0; i < n; i++) {
        scanf("%d", &(items[i]));
    }

    qsort(items, n, sizeof(int), my_sort);

    int summ = 0;
    for (int i = 0; i < m && items[i] != 0 && items[i] > 0; i++) {
        summ += items[i];
    }

    printf("%d", summ);

    return 0;
}


int my_sort(const void  *a, const void *b) {
    int result = (*(int*)b - *(int*)a);
    return result;
}
